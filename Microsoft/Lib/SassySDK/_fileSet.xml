<?xml version="1.0" encoding="UTF-16"?>
<FileSet xmlns:xs="http://www.w3.org/2001/XMLSchema">
<FileSetFiles>
<FileSetFile>
<RelativePath>LexiconEnum.cs</RelativePath>
<OverwriteMode>Always</OverwriteMode>
<FileContents>using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections;

namespace SassyMQ.OSTL.Lib.RabbitMQ
{
    public enum LexiconTermEnum
    {
        owner_getfile_host, 
        owner_getfiles_host, 
        owner_getmoduleinitfileset_host, 
        owner_getsdk_host, 
        owner_rebuildsdk_host, 
        owner_setsource_host, 
        owner_takeownership_host, 
        public_createsmqproject_host
    }
}</FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>LexiconTerms.designer.cs</RelativePath>
<OverwriteMode>Always</OverwriteMode>
<FileContents>using System;

using System.Linq;
using System.Collections.Generic;
using System.Collections;
using SassyMQ.Lib.RabbitMQ;

namespace SassyMQ.OSTL.Lib.RabbitMQ
{
    public class LexiconTerm : LexiconTerm&lt;LexiconTermEnum&gt; { }

    public partial class Lexicon
    {
        public static Lexicon Terms = new Lexicon();
        protected static new Dictionary&lt;LexiconTermEnum, LexiconTerm&gt; TermsByKey { get; set; }

        public LexiconTerm this[LexiconTermEnum termKey]
        {
            get { return TermsByKey[termKey]; }
        }

        public LexiconTerm FromRoutingKey(string routingKey)
        {
            return Lexicon.TermsByKey.Values.FirstOrDefault(first =&gt; first.RoutingKey == routingKey);
        }


        public IEnumerator&lt;LexiconTerm&gt; GetEnumerator()
        {
            return Lexicon.TermsByKey.Values.GetEnumerator();
        }

        static Lexicon()
        {
            Lexicon.TermsByKey = new Dictionary&lt;LexiconTermEnum, LexiconTerm&gt;();
            
            Lexicon.TermsByKey[LexiconTermEnum.public_createsmqproject_host] = new LexiconTerm() {
                Term = LexiconTermEnum.public_createsmqproject_host,
                Sender = "public",
                Verb = "createsmqproject",
                Receiver = "host",
                Category = "general"
            };
            
            Lexicon.TermsByKey[LexiconTermEnum.owner_takeownership_host] = new LexiconTerm() {
                Term = LexiconTermEnum.owner_takeownership_host,
                Sender = "owner",
                Verb = "takeownership",
                Receiver = "host",
                Category = "general"
            };
            
            Lexicon.TermsByKey[LexiconTermEnum.owner_setsource_host] = new LexiconTerm() {
                Term = LexiconTermEnum.owner_setsource_host,
                Sender = "owner",
                Verb = "setsource",
                Receiver = "host",
                Category = "general"
            };
            
            Lexicon.TermsByKey[LexiconTermEnum.owner_getsdk_host] = new LexiconTerm() {
                Term = LexiconTermEnum.owner_getsdk_host,
                Sender = "owner",
                Verb = "getsdk",
                Receiver = "host",
                Category = "general"
            };
            
            Lexicon.TermsByKey[LexiconTermEnum.owner_rebuildsdk_host] = new LexiconTerm() {
                Term = LexiconTermEnum.owner_rebuildsdk_host,
                Sender = "owner",
                Verb = "rebuildsdk",
                Receiver = "host",
                Category = "general"
            };
            
            Lexicon.TermsByKey[LexiconTermEnum.owner_getfiles_host] = new LexiconTerm() {
                Term = LexiconTermEnum.owner_getfiles_host,
                Sender = "owner",
                Verb = "getfiles",
                Receiver = "host",
                Category = "general"
            };
            
            Lexicon.TermsByKey[LexiconTermEnum.owner_getfile_host] = new LexiconTerm() {
                Term = LexiconTermEnum.owner_getfile_host,
                Sender = "owner",
                Verb = "getfile",
                Receiver = "host",
                Category = "general"
            };
            
            Lexicon.TermsByKey[LexiconTermEnum.owner_getmoduleinitfileset_host] = new LexiconTerm() {
                Term = LexiconTermEnum.owner_getmoduleinitfileset_host,
                Sender = "owner",
                Verb = "getmoduleinitfileset",
                Receiver = "host",
                Category = "general"
            };
            
        }
    }
}</FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>LexiconTerms.cs</RelativePath>
<OverwriteMode>Never</OverwriteMode>
<FileContents>using System;
using System.Linq;
using System.Collections.Generic;

namespace SassyMQ.OSTL.Lib.RabbitMQ
{
    public static partial class LexiconTerms 
    {
    }
</FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>RMQActors/SMQPublic.designer.cs</RelativePath>
<OverwriteMode>Always</OverwriteMode>
<FileContents>
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using RabbitMQ.Client.MessagePatterns;
using SassyMQ.Lib.RabbitMQ;
using SassyMQ.OSTL.Lib.RabbitMQ;
using SassyMQ.Lib.RabbitMQ.Payload;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace SassyMQ.OSTL.Lib.RMQActors
{
    public partial class SMQPublic : SMQActorBase&lt;OSTLPayload&gt;
    {
     
        public SMQPublic(bool isAutoConnect = true)
            : base("public.all", isAutoConnect)
        {
        }
        // OpenSourceToolsLexicon - OSTL
        public virtual bool Connect(string virtualHost, string username, string password)
        {
            return base.Connect(virtualHost, username, password);
        }   

        protected override void CheckRouting(OSTLPayload payload) {
            
        }

        
            public void PublicCreateSMQProject() {
                this.PublicCreateSMQProject(this.CreatePayload());
            }

            public void PublicCreateSMQProject(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.PublicCreateSMQProject(payload);
            }

            public void PublicCreateSMQProject(OSTLPayload payload)
            {
                this.SendMessage(payload, "Create S M Q Project - ",
                        "publicmic", "host.general.public.createsmqproject");
             }

 
        

            private void SendMessage(OSTLPayload payload, string description, string mic, string routingKey)
            {
                if (IsDebugMode)
                {
                    System.Console.WriteLine(description);
                    System.Console.WriteLine("payload: " + payload.SafeToString());
                }

                IBasicProperties props = this.RMQChannel.CreateBasicProperties();
                props.ReplyTo = "amq.rabbitmq.reply-to";
                this.RMQChannel.BasicPublish(mic, routingKey, props, Encoding.UTF8.GetBytes(payload.ToJSonString()));
            }

     
    }
}

                    </FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>RMQActors/SMQPublic.cs</RelativePath>
<OverwriteMode>Never</OverwriteMode>
<FileContents>using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using RabbitMQ.Client.Framing;
using RabbitMQ.Client.MessagePatterns;
using SassyMQ.Lib.RabbitMQ;
using SassyMQ.Lib.RabbitMQ.Payload;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Threading.Tasks;

namespace SassyMQ.OSTL.Lib.RMQActors
{
    public partial class SMQPublic
    {
    }
}

                    </FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>RMQActors/SMQOwner.designer.cs</RelativePath>
<OverwriteMode>Always</OverwriteMode>
<FileContents>
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using RabbitMQ.Client.MessagePatterns;
using SassyMQ.Lib.RabbitMQ;
using SassyMQ.OSTL.Lib.RabbitMQ;
using SassyMQ.Lib.RabbitMQ.Payload;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace SassyMQ.OSTL.Lib.RMQActors
{
    public partial class SMQOwner : SMQActorBase&lt;OSTLPayload&gt;
    {
     
        public SMQOwner(bool isAutoConnect = true)
            : base("owner.all", isAutoConnect)
        {
        }
        // OpenSourceToolsLexicon - OSTL
        public virtual bool Connect(string virtualHost, string username, string password)
        {
            return base.Connect(virtualHost, username, password);
        }   

        protected override void CheckRouting(OSTLPayload payload) {
            
            // And can also hear everything which : Public hears.
            
        }

        
            public void OwnerTakeOwnership() {
                this.OwnerTakeOwnership(this.CreatePayload());
            }

            public void OwnerTakeOwnership(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerTakeOwnership(payload);
            }

            public void OwnerTakeOwnership(OSTLPayload payload)
            {
                this.SendMessage(payload, "Take Ownership - ",
                        "ownermic", "host.general.owner.takeownership");
             }

 
        
            public void OwnerSetSource() {
                this.OwnerSetSource(this.CreatePayload());
            }

            public void OwnerSetSource(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerSetSource(payload);
            }

            public void OwnerSetSource(OSTLPayload payload)
            {
                this.SendMessage(payload, "Set Source - ",
                        "ownermic", "host.general.owner.setsource");
             }

 
        
            public void OwnerGetSDK() {
                this.OwnerGetSDK(this.CreatePayload());
            }

            public void OwnerGetSDK(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetSDK(payload);
            }

            public void OwnerGetSDK(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get S D K - ",
                        "ownermic", "host.general.owner.getsdk");
             }

 
        
            public void OwnerRebuildSDK() {
                this.OwnerRebuildSDK(this.CreatePayload());
            }

            public void OwnerRebuildSDK(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerRebuildSDK(payload);
            }

            public void OwnerRebuildSDK(OSTLPayload payload)
            {
                this.SendMessage(payload, "Rebuild S D K - ",
                        "ownermic", "host.general.owner.rebuildsdk");
             }

 
        
            public void OwnerGetFiles() {
                this.OwnerGetFiles(this.CreatePayload());
            }

            public void OwnerGetFiles(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetFiles(payload);
            }

            public void OwnerGetFiles(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get Files - ",
                        "ownermic", "host.general.owner.getfiles");
             }

 
        
            public void OwnerGetFile() {
                this.OwnerGetFile(this.CreatePayload());
            }

            public void OwnerGetFile(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetFile(payload);
            }

            public void OwnerGetFile(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get File - ",
                        "ownermic", "host.general.owner.getfile");
             }

 
        
            public void OwnerGetModuleInitFileSet() {
                this.OwnerGetModuleInitFileSet(this.CreatePayload());
            }

            public void OwnerGetModuleInitFileSet(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetModuleInitFileSet(payload);
            }

            public void OwnerGetModuleInitFileSet(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get Module Init File Set - ",
                        "ownermic", "host.general.owner.getmoduleinitfileset");
             }

 
        
            // And can also say/hear everything which : Public hears.
            
            public void PublicCreateSMQProject() {
                this.PublicCreateSMQProject(this.CreatePayload());
            }

            public void PublicCreateSMQProject(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.PublicCreateSMQProject(payload);
            }

            public void PublicCreateSMQProject(OSTLPayload payload)
            {
                this.SendMessage(payload, "Create S M Q Project - ",
                        "publicmic", "host.general.public.createsmqproject");
             }

 
        

            private void SendMessage(OSTLPayload payload, string description, string mic, string routingKey)
            {
                if (IsDebugMode)
                {
                    System.Console.WriteLine(description);
                    System.Console.WriteLine("payload: " + payload.SafeToString());
                }

                IBasicProperties props = this.RMQChannel.CreateBasicProperties();
                props.ReplyTo = "amq.rabbitmq.reply-to";
                this.RMQChannel.BasicPublish(mic, routingKey, props, Encoding.UTF8.GetBytes(payload.ToJSonString()));
            }

     
    }
}

                    </FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>RMQActors/SMQOwner.cs</RelativePath>
<OverwriteMode>Never</OverwriteMode>
<FileContents>using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using RabbitMQ.Client.Framing;
using RabbitMQ.Client.MessagePatterns;
using SassyMQ.Lib.RabbitMQ;
using SassyMQ.Lib.RabbitMQ.Payload;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Threading.Tasks;

namespace SassyMQ.OSTL.Lib.RMQActors
{
    public partial class SMQOwner
    {
    }
}

                    </FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>RMQActors/SMQHost.designer.cs</RelativePath>
<OverwriteMode>Always</OverwriteMode>
<FileContents>
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using RabbitMQ.Client.MessagePatterns;
using SassyMQ.Lib.RabbitMQ;
using SassyMQ.OSTL.Lib.RabbitMQ;
using SassyMQ.Lib.RabbitMQ.Payload;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace SassyMQ.OSTL.Lib.RMQActors
{
    public partial class SMQHost : SMQActorBase&lt;OSTLPayload&gt;
    {
     
        public SMQHost(bool isAutoConnect = true)
            : base("host.all", isAutoConnect)
        {
        }
        // OpenSourceToolsLexicon - OSTL
        public virtual bool Connect(string virtualHost, string username, string password)
        {
            return base.Connect(virtualHost, username, password);
        }   

        protected override void CheckRouting(OSTLPayload payload) {
            
             if (payload.IsLexiconTerm(LexiconTermEnum.public_createsmqproject_host)) 
            {
                this.OnPublicCreateSMQProjectReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            else  if (payload.IsLexiconTerm(LexiconTermEnum.owner_takeownership_host)) 
            {
                this.OnOwnerTakeOwnershipReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            else  if (payload.IsLexiconTerm(LexiconTermEnum.owner_setsource_host)) 
            {
                this.OnOwnerSetSourceReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            else  if (payload.IsLexiconTerm(LexiconTermEnum.owner_getsdk_host)) 
            {
                this.OnOwnerGetSDKReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            else  if (payload.IsLexiconTerm(LexiconTermEnum.owner_rebuildsdk_host)) 
            {
                this.OnOwnerRebuildSDKReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            else  if (payload.IsLexiconTerm(LexiconTermEnum.owner_getfiles_host)) 
            {
                this.OnOwnerGetFilesReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            else  if (payload.IsLexiconTerm(LexiconTermEnum.owner_getfile_host)) 
            {
                this.OnOwnerGetFileReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            else  if (payload.IsLexiconTerm(LexiconTermEnum.owner_getmoduleinitfileset_host)) 
            {
                this.OnOwnerGetModuleInitFileSetReceived(payload);
                if (!System.String.IsNullOrEmpty(payload.ReplyTo)) 
                {
                    this.RMQChannel.BasicPublish("", payload.ReplyTo, body: Encoding.UTF8.GetBytes(payload.ToJSonString()));
                }
            }
        
            // And can also hear everything which : Owner hears.
            
            // And can also hear everything which : Public hears.
            
        }

        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; PublicCreateSMQProjectReceived;
        protected virtual void OnPublicCreateSMQProjectReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Create S M Q Project - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.PublicCreateSMQProjectReceived, plea);
        }
        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; OwnerTakeOwnershipReceived;
        protected virtual void OnOwnerTakeOwnershipReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Take Ownership - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.OwnerTakeOwnershipReceived, plea);
        }
        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; OwnerSetSourceReceived;
        protected virtual void OnOwnerSetSourceReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Set Source - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.OwnerSetSourceReceived, plea);
        }
        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; OwnerGetSDKReceived;
        protected virtual void OnOwnerGetSDKReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Get S D K - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.OwnerGetSDKReceived, plea);
        }
        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; OwnerRebuildSDKReceived;
        protected virtual void OnOwnerRebuildSDKReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Rebuild S D K - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.OwnerRebuildSDKReceived, plea);
        }
        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; OwnerGetFilesReceived;
        protected virtual void OnOwnerGetFilesReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Get Files - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.OwnerGetFilesReceived, plea);
        }
        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; OwnerGetFileReceived;
        protected virtual void OnOwnerGetFileReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Get File - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.OwnerGetFileReceived, plea);
        }
        
        public event System.EventHandler&lt;PayloadEventArgs&lt;OSTLPayload&gt;&gt; OwnerGetModuleInitFileSetReceived;
        protected virtual void OnOwnerGetModuleInitFileSetReceived(OSTLPayload payload)
        {
            if (IsDebugMode) 
            {
                System.Console.WriteLine("Get Module Init File Set - ");
                System.Console.WriteLine("payload: " + payload.SafeToString());
            }

            var plea = new PayloadEventArgs&lt;OSTLPayload&gt;(payload);
            this.Invoke(this.OwnerGetModuleInitFileSetReceived, plea);
        }
        
            // And can also say/hear everything which : Owner hears.
            
            public void OwnerTakeOwnership() {
                this.OwnerTakeOwnership(this.CreatePayload());
            }

            public void OwnerTakeOwnership(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerTakeOwnership(payload);
            }

            public void OwnerTakeOwnership(OSTLPayload payload)
            {
                this.SendMessage(payload, "Take Ownership - ",
                        "ownermic", "host.general.owner.takeownership");
             }

 
        
            public void OwnerSetSource() {
                this.OwnerSetSource(this.CreatePayload());
            }

            public void OwnerSetSource(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerSetSource(payload);
            }

            public void OwnerSetSource(OSTLPayload payload)
            {
                this.SendMessage(payload, "Set Source - ",
                        "ownermic", "host.general.owner.setsource");
             }

 
        
            public void OwnerGetSDK() {
                this.OwnerGetSDK(this.CreatePayload());
            }

            public void OwnerGetSDK(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetSDK(payload);
            }

            public void OwnerGetSDK(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get S D K - ",
                        "ownermic", "host.general.owner.getsdk");
             }

 
        
            public void OwnerRebuildSDK() {
                this.OwnerRebuildSDK(this.CreatePayload());
            }

            public void OwnerRebuildSDK(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerRebuildSDK(payload);
            }

            public void OwnerRebuildSDK(OSTLPayload payload)
            {
                this.SendMessage(payload, "Rebuild S D K - ",
                        "ownermic", "host.general.owner.rebuildsdk");
             }

 
        
            public void OwnerGetFiles() {
                this.OwnerGetFiles(this.CreatePayload());
            }

            public void OwnerGetFiles(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetFiles(payload);
            }

            public void OwnerGetFiles(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get Files - ",
                        "ownermic", "host.general.owner.getfiles");
             }

 
        
            public void OwnerGetFile() {
                this.OwnerGetFile(this.CreatePayload());
            }

            public void OwnerGetFile(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetFile(payload);
            }

            public void OwnerGetFile(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get File - ",
                        "ownermic", "host.general.owner.getfile");
             }

 
        
            public void OwnerGetModuleInitFileSet() {
                this.OwnerGetModuleInitFileSet(this.CreatePayload());
            }

            public void OwnerGetModuleInitFileSet(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.OwnerGetModuleInitFileSet(payload);
            }

            public void OwnerGetModuleInitFileSet(OSTLPayload payload)
            {
                this.SendMessage(payload, "Get Module Init File Set - ",
                        "ownermic", "host.general.owner.getmoduleinitfileset");
             }

 
        
            // And can also say/hear everything which : Public hears.
            
            public void PublicCreateSMQProject() {
                this.PublicCreateSMQProject(this.CreatePayload());
            }

            public void PublicCreateSMQProject(System.String content) {
                var payload = this.CreatePayload();
                payload.Content = content;
                this.PublicCreateSMQProject(payload);
            }

            public void PublicCreateSMQProject(OSTLPayload payload)
            {
                this.SendMessage(payload, "Create S M Q Project - ",
                        "publicmic", "host.general.public.createsmqproject");
             }

 
        

            private void SendMessage(OSTLPayload payload, string description, string mic, string routingKey)
            {
                if (IsDebugMode)
                {
                    System.Console.WriteLine(description);
                    System.Console.WriteLine("payload: " + payload.SafeToString());
                }

                IBasicProperties props = this.RMQChannel.CreateBasicProperties();
                props.ReplyTo = "amq.rabbitmq.reply-to";
                this.RMQChannel.BasicPublish(mic, routingKey, props, Encoding.UTF8.GetBytes(payload.ToJSonString()));
            }

     
    }
}

                    </FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>RMQActors/SMQHost.cs</RelativePath>
<OverwriteMode>Never</OverwriteMode>
<FileContents>using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using RabbitMQ.Client.Framing;
using RabbitMQ.Client.MessagePatterns;
using SassyMQ.Lib.RabbitMQ;
using SassyMQ.Lib.RabbitMQ.Payload;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Threading.Tasks;

namespace SassyMQ.OSTL.Lib.RMQActors
{
    public partial class SMQHost
    {
    }
}

                    </FileContents>
</FileSetFile>
<FileSetFile>
<RelativePath>OSTLPayload.cs</RelativePath>
<OverwriteMode>Never</OverwriteMode>
<FileContents>using SassyMQ.Lib.RabbitMQ.Payload;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SassyMQ.OSTL.Lib.RMQActors
{
    public class OSTLPayload : StandardPayload&lt;OSTLPayload&gt;
    {

    }
}
</FileContents>
</FileSetFile>
</FileSetFiles>
</FileSet>
